{"version":3,"sources":["utilities.js","App.jsx","index.js"],"names":["fingerJoints","thumb","indexFinger","middleFineger","ringFinger","pinky","drawHand","predictions","cns","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill","App","webcamref","useRef","canvasref","runHandpose","a","handpose","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","estimateHands","hand","getContext","ref","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sWAEMA,EAAe,CACjBC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,GACfC,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE,GACrBC,cAAc,CAAC,EAAE,EAAE,GAAG,GAAG,IACzBC,WAAW,CAAC,EAAE,GAAG,GAAG,GAAG,IACvBC,MAAM,CAAC,EAAE,GAAG,GAAG,GAAG,KAITC,EAAW,SAACC,EAAcC,GAE/BD,EAAYE,OAAO,GAEnBF,EAAYG,SAAQ,SAACC,GAKjB,IAHA,IAAMC,EAAYD,EAAWC,UAGrBC,EAAE,EAAEA,EAAEC,OAAOC,KAAKf,GAAcS,OAAOI,IAG3C,IADA,IAAMG,EAASF,OAAOC,KAAKf,GAAca,GACjCI,EAAE,EAAEA,EAAEjB,EAAagB,GAAQP,OAAQ,EAAEQ,IAAI,CAE7C,IAAMC,EAAgBlB,EAAagB,GAAQC,GACrCE,EAAkBnB,EAAagB,GAAQC,EAAE,GAG/CT,EAAIY,YACJZ,EAAIa,OACAT,EAAUM,GAAiB,GAC3BN,EAAUM,GAAiB,IAE/BV,EAAIc,OACAV,EAAUO,GAAkB,GAC5BP,EAAUO,GAAkB,IAEhCX,EAAIe,YAAY,OAChBf,EAAIgB,UAAU,EACdhB,EAAIiB,SAKZ,IAAI,IAAIC,EAAE,EAAEA,EAAEd,EAAUH,OAAOiB,IAAI,CAE/B,IAAMC,EAAIf,EAAUc,GAAG,GAEjBE,EAAIhB,EAAUc,GAAG,GAEvBlB,EAAIY,YACJZ,EAAIqB,IAAIF,EAAEC,EAAE,EAAE,EAAE,EAAEE,KAAKC,IAEvBvB,EAAIwB,UAAU,SACdxB,EAAIyB,Y,SCmBLC,EApEH,WACV,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MACnBE,EAAW,uCAAG,4BAAAC,EAAA,sEACAC,MADA,OACZC,EADY,OAElBC,QAAQC,IAAI,oBAEZC,aAAY,WACVC,EAAOJ,KACP,KANgB,2CAAH,qDASXI,EAAM,uCAAG,WAAOJ,GAAP,uBAAAF,EAAA,yDAEmB,qBAAtBJ,EAAUW,SACE,OAAtBX,EAAUW,SAC6B,IAAvCX,EAAUW,QAAQC,MAAMC,WAJX,wBAQPD,EAAQZ,EAAUW,QAAQC,MAC1BE,EAAad,EAAUW,QAAQC,MAAME,WACrCC,EAAcf,EAAUW,QAAQC,MAAMG,YAE5Cf,EAAUW,QAAQC,MAAMI,MAAQF,EAChCd,EAAUW,QAAQC,MAAMK,OAASF,EAEjCb,EAAUS,QAAQK,MAAMF,EACxBZ,EAAUS,QAAQM,OAAOF,EAhBZ,UAkBMT,EAAIY,cAAcN,GAlBxB,QAkBPO,EAlBO,OAmBbZ,QAAQC,IAAIW,GAEN9C,EAAM6B,EAAUS,QAAQS,WAAW,MACzCjD,EAASgD,EAAK9C,GAtBD,4CAAH,sDA0BZ,OADA8B,IAEE,gCACE,cAAC,IAAD,CAAQkB,IAAKrB,EACbsB,MAAO,CACLC,SAAS,WACTC,WAAW,OACXC,YAAY,OACZC,KAAK,EACLC,MAAM,EACNC,UAAU,SACVC,OAAO,EACPb,MAAM,IACNC,OAAO,OAET,wBAAQI,IAAKnB,EACboB,MAAO,CACLC,SAAS,WACTC,WAAW,OACXC,YAAY,OACZC,KAAK,EACLC,MAAM,EACNC,UAAU,SACVC,OAAO,EACPb,MAAM,IACNC,OAAO,WChEfa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce1de9f7.chunk.js","sourcesContent":["import { ComplexAbs } from \"@tensorflow/tfjs\";\n\nconst fingerJoints = {\n    thumb:[0,1,2,3,4],\n    indexFinger:[0,5,6,7,8],\n    middleFineger:[0,9,10,11,12],\n    ringFinger:[0,13,14,15,16],\n    pinky:[0,17,18,19,20],\n};\n\n\nexport const drawHand = (predictions , cns) =>{\n    // check if we have predictions\n    if( predictions.length>0){\n        // loop through predictions\n        predictions.forEach((prediction) => {\n            // Grab landmarks\n            const landmarks = prediction.landmarks;\n\n            // loop p through fingers\n            for(let j=0;j<Object.keys(fingerJoints).length;j++){\n                // loop through joints\n                const finger = Object.keys(fingerJoints)[j];\n                for(let k=0;k<fingerJoints[finger].length -1;k++){\n                    // get pairs of joints\n                    const firstJointIndex=fingerJoints[finger][k];\n                    const secondJointIndex= fingerJoints[finger][k+1];\n\n                    // Draw Path\n                    cns.beginPath();\n                    cns.moveTo(\n                        landmarks[firstJointIndex][0],\n                        landmarks[firstJointIndex][1]\n                    );\n                    cns.lineTo(\n                        landmarks[secondJointIndex][0],\n                        landmarks[secondJointIndex][1]\n                    );\n                    cns.strokeStyle=\"plum\";\n                    cns.lineWidth=4;\n                    cns.stroke();\n                }\n            }\n\n            // loop through landmarks and draw them\n            for(let i=0;i<landmarks.length;i++){\n                // get x point \n                const x = landmarks[i][0];\n                // get y point\n                const y = landmarks[i][1];\n                // start drawing\n                cns.beginPath();\n                cns.arc(x,y,5,0,3*Math.PI);\n                // set line color\n                cns.fillStyle=\"indigo\";\n                cns.fill();\n            }\n        });\n    }\n}","import React,{useRef} from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from 'react-webcam';\nimport { drawHand } from './utilities';\n\nconst App = () => {\n  const webcamref = useRef(null);\n  const canvasref = useRef(null);\n  const runHandpose = async () =>{\n    const net = await handpose.load();\n    console.log(\"Handpose Loaded.\")\n    // loop to detect hand\n    setInterval(()=>{\n      detect(net)\n    },100)\n    \n  };\n  const detect = async (net)=>{\n    // check data is available\n    if(typeof webcamref.current !== 'undefined' &&\n    webcamref.current !== null &&\n    webcamref.current.video.readyState === 4\n    ){\n\n    // get video properties\n    const video = webcamref.current.video;\n    const videoWidth = webcamref.current.video.videoWidth;\n    const videoHeight = webcamref.current.video.videoHeight;\n    // set video height and width\n    webcamref.current.video.width = videoWidth;\n    webcamref.current.video.height = videoHeight;\n    // set canvas height and width\n    canvasref.current.width=videoWidth;\n    canvasref.current.height=videoHeight;\n    // Make detections\n    const hand = await net.estimateHands(video);\n    console.log(hand);\n    // Draw mesh\n    const cns = canvasref.current.getContext(\"2d\");\n    drawHand(hand,cns);\n    }\n  }\n  runHandpose();\n  return (\n    <div>\n      <Webcam ref={webcamref} \n      style={{\n        position:\"absolute\",\n        marginLeft:\"auto\",\n        marginRight:\"auto\",\n        left:0,\n        right:0,\n        textAlign:\"center\",\n        zindex:9,\n        width:640,\n        height:480\n      }} />\n      <canvas ref={canvasref}\n      style={{\n        position:\"absolute\",\n        marginLeft:\"auto\",\n        marginRight:\"auto\",\n        left:0,\n        right:0,\n        textAlign:\"center\",\n        zindex:9,\n        width:640,\n        height:480\n      }} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}